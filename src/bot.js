const { Octokit } = require("@octokit/rest");
const logger = require("./utils/logger");
const { sleep, isValidRepository } = require("./utils/helpers");

class GitHubBot {
  constructor(config) {
    this.config = {
      token: config.token,
      username: config.username,
      repositories: config.repositories || [],
      interval: config.interval || 2,
      mode: config.mode || "star",
    };

    // Inicializar cliente GitHub
    this.octokit = new Octokit({
      auth: this.config.token,
    });

    logger.info(
      `ü§ñ Bot configurado para ${this.config.repositories.length} reposit√≥rios`
    );
    logger.info(`‚è±Ô∏è Intervalo entre opera√ß√µes: ${this.config.interval}s`);
    logger.info(`üéØ Modo: ${this.config.mode}`);
  }

  async run() {
    logger.info(`\nüé¨ Iniciando opera√ß√£o: ${this.config.mode.toUpperCase()}`);

    // Validar autentica√ß√£o
    await this.validateAuth();

    // Validar reposit√≥rios
    const validRepos = this.validateRepositories();

    if (validRepos.length === 0) {
      throw new Error("Nenhum reposit√≥rio v√°lido encontrado");
    }

    // Executar opera√ß√£o baseada no modo
    switch (this.config.mode.toLowerCase()) {
      case "star":
        await this.starRepositories(validRepos);
        break;
      case "unstar":
        await this.unstarRepositories(validRepos);
        break;
      case "check":
        await this.checkStarStatus(validRepos);
        break;
      default:
        throw new Error(`Modo inv√°lido: ${this.config.mode}`);
    }
  }

  async validateAuth() {
    try {
      const { data: user } = await this.octokit.rest.users.getAuthenticated();
      logger.info(`‚úÖ Autenticado como: ${user.login}`);

      if (this.config.username && user.login !== this.config.username) {
        logger.warn(
          `‚ö†Ô∏è Usu√°rio configurado (${this.config.username}) diferente do autenticado (${user.login})`
        );
      }
    } catch (error) {
      throw new Error(`Falha na autentica√ß√£o: ${error.message}`);
    }
  }

  validateRepositories() {
    const validRepos = [];

    for (const repo of this.config.repositories) {
      if (isValidRepository(repo)) {
        validRepos.push(repo);
      } else {
        logger.warn(`‚ö†Ô∏è Reposit√≥rio inv√°lido ignorado: ${repo}`);
      }
    }

    logger.info(`‚úÖ ${validRepos.length} reposit√≥rios v√°lidos encontrados`);
    return validRepos;
  }

  async starRepositories(repositories) {
    logger.info(
      `\n‚≠ê Dando estrela em ${repositories.length} reposit√≥rios...\n`
    );

    let successCount = 0;
    let errorCount = 0;

    for (const repo of repositories) {
      try {
        const [owner, repoName] = repo.split("/");

        // Verificar se j√° tem estrela
        const isStarred = await this.isRepositoryStarred(owner, repoName);

        if (isStarred) {
          logger.info(`‚≠ê ${repo} - J√° possui estrela`);
        } else {
          // Dar estrela
          await this.octokit.rest.activity.starRepoForAuthenticatedUser({
            owner,
            repo: repoName,
          });

          logger.info(`üåü ${repo} - Estrela adicionada!`);
          successCount++;
        }

        // Aguardar intervalo
        if (repositories.indexOf(repo) < repositories.length - 1) {
          await sleep(this.config.interval * 1000);
        }
      } catch (error) {
        logger.error(`‚ùå ${repo} - Erro: ${error.message}`);
        errorCount++;
      }
    }

    logger.info(`\nüìä Resumo da opera√ß√£o:`);
    logger.info(`‚úÖ Sucessos: ${successCount}`);
    logger.info(`‚ùå Erros: ${errorCount}`);
  }

  async unstarRepositories(repositories) {
    logger.info(
      `\nüîÑ Removendo estrela de ${repositories.length} reposit√≥rios...\n`
    );

    let successCount = 0;
    let errorCount = 0;

    for (const repo of repositories) {
      try {
        const [owner, repoName] = repo.split("/");

        // Verificar se tem estrela
        const isStarred = await this.isRepositoryStarred(owner, repoName);

        if (!isStarred) {
          logger.info(`‚ö™ ${repo} - N√£o possui estrela`);
        } else {
          // Remover estrela
          await this.octokit.rest.activity.unstarRepoForAuthenticatedUser({
            owner,
            repo: repoName,
          });

          logger.info(`üîÑ ${repo} - Estrela removida!`);
          successCount++;
        }

        // Aguardar intervalo
        if (repositories.indexOf(repo) < repositories.length - 1) {
          await sleep(this.config.interval * 1000);
        }
      } catch (error) {
        logger.error(`‚ùå ${repo} - Erro: ${error.message}`);
        errorCount++;
      }
    }

    logger.info(`\nüìä Resumo da opera√ß√£o:`);
    logger.info(`‚úÖ Sucessos: ${successCount}`);
    logger.info(`‚ùå Erros: ${errorCount}`);
  }

  async checkStarStatus(repositories) {
    logger.info(
      `\nüîç Verificando status de ${repositories.length} reposit√≥rios...\n`
    );

    let starredCount = 0;
    let notStarredCount = 0;
    let errorCount = 0;

    for (const repo of repositories) {
      try {
        const [owner, repoName] = repo.split("/");
        const isStarred = await this.isRepositoryStarred(owner, repoName);

        if (isStarred) {
          logger.info(`‚≠ê ${repo} - COM estrela`);
          starredCount++;
        } else {
          logger.info(`‚ö™ ${repo} - SEM estrela`);
          notStarredCount++;
        }

        // Aguardar intervalo
        if (repositories.indexOf(repo) < repositories.length - 1) {
          await sleep(this.config.interval * 1000);
        }
      } catch (error) {
        logger.error(`‚ùå ${repo} - Erro: ${error.message}`);
        errorCount++;
      }
    }

    logger.info(`\nüìä Status das estrelas:`);
    logger.info(`‚≠ê Com estrela: ${starredCount}`);
    logger.info(`‚ö™ Sem estrela: ${notStarredCount}`);
    logger.info(`‚ùå Erros: ${errorCount}`);
  }

  async isRepositoryStarred(owner, repo) {
    try {
      await this.octokit.rest.activity.checkRepoIsStarredByAuthenticatedUser({
        owner,
        repo,
      });
      return true;
    } catch (error) {
      if (error.status === 404) {
        return false;
      }
      throw error;
    }
  }

  async getRepositoryInfo(owner, repo) {
    try {
      const { data } = await this.octokit.rest.repos.get({
        owner,
        repo,
      });

      return {
        name: data.full_name,
        description: data.description,
        stars: data.stargazers_count,
        language: data.language,
        url: data.html_url,
      };
    } catch (error) {
      throw new Error(`Reposit√≥rio n√£o encontrado: ${owner}/${repo}`);
    }
  }
}

module.exports = GitHubBot;
